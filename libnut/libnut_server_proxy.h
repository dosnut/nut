/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -a libnut_server_adaptor.h -p libnut_server_proxy.cpp libnut_server.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
*  beep. need to edit. edid ist da und editet.
 */

#ifndef LIBNUT_SERVER_PROXY_H
#define LIBNUT_SERVER_PROXY_H

#include <QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "libnut_types.h"
#include <QMetaType>
namespace libnut {
/*
 * Proxy class for interface NUT_DBUS_URL.Device
 */
class NUT_DBUS_URLDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "NUT_DBUS_URL.Device"; }

public:
    NUT_DBUS_URLDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NUT_DBUS_URLDeviceInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<bool> disable()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("disable"), argumentList);
    }

    inline QDBusReply<bool> enable()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("enable"), argumentList);
    }

    inline QDBusReply<QList<QDBusObjectPath> > getEnvironments()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getEnvironments"), argumentList);
    }
    inline QDBusReply<libnut::libnut_DeviceProperties> getProperties() {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getProperties"), argumentList);
    }
    inline QDBusReply<void> setEnvironment(QDBusObjectPath envpath) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(envpath);
        return callWithArgumentList(QDBus::Block, QLatin1String("setEnvironment"), argumentList);
    }
    inline QDBusReply<QList<libnut_wlanScanresult> > getwlanScan() {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getwlanScan"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> addwlanEnvironment(libnut_wlanNetworkProperties netprops) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(netprops);
        return callWithArgumentList(QDBus::Block, QLatin1String("addwlanEnvironment"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void environmentChangedActive(const QDBusObjectPath &newenv);
    void environmentsUpdated();
    void stateChanged();
};

/*
 * Proxy class for interface NUT_DBUS_URL.DeviceManager
 */
class NUT_DBUS_URLDeviceManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "NUT_DBUS_URL.DeviceManager"; }

public:
    NUT_DBUS_URLDeviceManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NUT_DBUS_URLDeviceManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QList<QDBusObjectPath> > getDeviceList()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getDeviceList"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void deviceAdded(const QDBusObjectPath &objectpath);
    void deviceRemoved(const QDBusObjectPath &objectpath);
};

/*
 * Proxy class for interface NUT_DBUS_URL.Environment
 */
class NUT_DBUS_URLEnvironmentInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "NUT_DBUS_URL.Environment"; }

public:
    NUT_DBUS_URLEnvironmentInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NUT_DBUS_URLEnvironmentInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QList<QDBusObjectPath> > getInterfaces()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getInterfaces"), argumentList);
    }

    inline QDBusReply<QList<libnut::libnut_SelectConfig> > getSelectConfig()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getSelectConfig"), argumentList);
    }

    inline QDBusReply<libnut::libnut_SelectConfig> getCurrentSelection()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getCurrentSelection"), argumentList);
    }
    inline QDBusReply<libnut::libnut_EnvironmentProperties> getProperties()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getProperties"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> addInterface(libnut_InterfaceProperties prop, bool state) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(prop) << qVariantFromValue(state);
        return callWithArgumentList(QDBus::Block, QLatin1String("addInterface"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void interfacesUpdated();
};

/*
 * Proxy class for interface NUT_DBUS_URL.Interface
 */
class NUT_DBUS_URLInterfaceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "NUT_DBUS_URL.Interface"; }

public:
    NUT_DBUS_URLInterfaceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NUT_DBUS_URLInterfaceInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> activate()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("activate"), argumentList);
    }

    inline QDBusReply<void> deactivate()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("deactivate"), argumentList);
    }

    inline QDBusReply<libnut::libnut_InterfaceProperties> getProperties()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getProperties"), argumentList);
    }

    inline QDBusReply<void> setIP(uint HostAddress)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(HostAddress);
        return callWithArgumentList(QDBus::Block, QLatin1String("setIP"), argumentList);
    }

    inline QDBusReply<void> setGateway(uint Gateway)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(Gateway);
        return callWithArgumentList(QDBus::Block, QLatin1String("setGateway"), argumentList);
    }

    inline QDBusReply<void> setNetmask(uint Netmask)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(Netmask);
        return callWithArgumentList(QDBus::Block, QLatin1String("setNetmask"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void StateChanged(const bool &state);
};
/*
namespace NUT_DBUS_URL {
  typedef ::NUT_DBUS_URLDeviceInterface Device;
  typedef NUT_DBUS_URL::NUT_DBUS_URLDeviceManagerInterface DeviceManager;
  typedef NUT_DBUS_URL::NUT_DBUS_URLEnvironmentInterface Environment;
  typedef NUT_DBUS_URL::NUT_DBUS_URLInterfaceInterface Interface;
}*/
}
#endif
