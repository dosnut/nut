/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -a libnut_server_adaptor.h -p libnut_server_proxy.cpp libnut_server.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
*  beep. need to edit. edid ist da und editet.
 */

#ifndef LIBNUT_SERVER_PROXY_H
#define LIBNUT_SERVER_PROXY_H

#include <QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <common/dbus.h>
#include <common/types.h>
#include <common/config.h>
#include <QMetaType>
namespace libnut {
/*
 * Proxy class for interface DBus.Device
 */
class DBusDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return NUT_DBUS_URL ".Device"; }

public:
    DBusDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusDeviceInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> disable()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("disable"), argumentList);
    }

    inline QDBusReply<void> enable()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("enable"), argumentList);
    }

    inline QDBusReply<QList<QDBusObjectPath> > getEnvironments()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getEnvironments"), argumentList);
    }
    inline QDBusReply<libnut::DeviceProperties> getProperties() {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getProperties"), argumentList);
    }
    inline QDBusReply<QString> essid() {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getEssid"), argumentList);
    }
	
	inline QDBusReply<nut::DeviceConfig> getConfig()
	{
		QList<QVariant> argumentList;
		return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getConfig"), argumentList);
	}
    inline QDBusReply<void> setEnvironment(QDBusObjectPath envpath) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(envpath);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("setEnvironment"), argumentList);
    }
    inline QDBusReply<void> addEnvironment(EnvironmentProperties envprops) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(envprops);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("addEnvironment"), argumentList);
    }
    inline QDBusReply<void> removeEnvironment(QDBusObjectPath path) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("removeEnvironment"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void environmentChangedActive(const QDBusObjectPath &newenv);
    void environmentAdded(const QDBusObjectPath &path);
    void environmentRemoved(const QDBusObjectPath &path);
    void stateChanged(int newState, int oldState);
};

/*
 * Proxy class for interface DBus.DeviceManager
 */
class DBusDeviceManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return NUT_DBUS_URL ".DeviceManager"; }

public:
    DBusDeviceManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusDeviceManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QList<QDBusObjectPath> > getDeviceList()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getDeviceList"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void deviceAdded(const QDBusObjectPath &objectpath);
    void deviceRemoved(const QDBusObjectPath &objectpath);
};

/*
 * Proxy class for interface DBus.Environment
 */
class DBusEnvironmentInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return NUT_DBUS_URL ".Environment"; }

public:
    DBusEnvironmentInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusEnvironmentInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QList<QDBusObjectPath> > getInterfaces()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getInterfaces"), argumentList);
    }

    inline QDBusReply<libnut::EnvironmentProperties> getProperties()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getProperties"), argumentList);
    }
	inline QDBusReply<nut::EnvironmentConfig> getConfig()
	{
		QList<QVariant> argumentList;
		return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getConfig"), argumentList);
	}
    inline QDBusReply<void> addInterface(nut::IPv4Config prop) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(prop);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("addInterface"), argumentList);
    }
    inline QDBusReply<void> removeInterface(QDBusObjectPath path) {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("removeInterface"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void interfaceAdded(const QDBusObjectPath &path);
    void interfaceRemoved(const QDBusObjectPath &path);
    void stateChanged(bool state);
};

/*
 * Proxy class for interface DBus.Interface
 */
class DBusInterfaceInterface_IPv4: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return NUT_DBUS_URL ".Interface_IPv4"; }

public:
    DBusInterfaceInterface_IPv4(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusInterfaceInterface_IPv4();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> activate()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("activate"), argumentList);
    }

    inline QDBusReply<void> deactivate()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("deactivate"), argumentList);
    }

    inline QDBusReply<libnut::InterfaceProperties> getProperties()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getProperties"), argumentList);
    }
	inline QDBusReply<nut::IPv4Config> getConfig()
	{
		QList<QVariant> argumentList;
		return callWithArgumentList(QDBus::BlockWithGui, QLatin1String("getConfig"), argumentList); 
	}

    inline QDBusReply<void> setIP(uint HostAddress)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(HostAddress);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("setIP"), argumentList);
    }

    inline QDBusReply<void> setGateway(uint Gateway)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(Gateway);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("setGateway"), argumentList);
    }

    inline QDBusReply<void> setNetmask(uint Netmask)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(Netmask);
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("setNetmask"), argumentList);
    }
	inline QDBusReply<void> setDNS(QList<QHostAddress> dns)
	{
		QList<QVariant> argumentList;
		argumentList << qVariantFromValue(dns);
		return callWithArgumentList(QDBus::NoBlock, QLatin1String("setDNS"), argumentList);
	}

    inline QDBusReply<void> setDynamic()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::NoBlock, QLatin1String("setDynamic"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void stateChanged(const InterfaceProperties &properties);
};
/*
namespace DBus {
  typedef ::DBusDeviceInterface Device;
  typedef DBus::DBusDeviceManagerInterface DeviceManager;
  typedef DBus::DBusEnvironmentInterface Environment;
  typedef DBus::DBusInterfaceInterface_IPv4 Interface;
}*/
}
#endif
