/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -a libnut_server_adaptor.h -p libnut_server_proxy.cpp libnut_server.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef LIBNUT_SERVER_ADAPTOR_H
#define LIBNUT_SERVER_ADAPTOR_H

#include <QtCore/QObject>
#include <QtCore/QMetaObject>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include "libnut_types.h"
namespace libnut {

/*
 * Adaptor class for interface NUT_DBUS_URL.Device
 */
class DeviceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Device")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Device\" >\n"
"    <signal name=\"environmentChangedActive\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"newenv\" />\n"
"    </signal>\n"
"    <signal name=\"environmentsUpdated\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"device\" />\n"
"    </signal>\n"
"    <signal name=\"stateChanged\" />\n"
"    <method name=\"getEnvironments\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"    <method name=\"enable\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"disable\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DeviceAdaptor(QObject *parent);
    virtual ~DeviceAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void disable();
    void enable();
    QList<QDBusObjectPath> getEnvironments();
    libnut_DeviceProperties getProperties();
    QList<libnut_wlanScanresult> getwlanScan();
    addwlanEnvironment(libnut_wlanNetworkProperties netprops);
    addEnvironment(libnut_EnvironmentProperties envprops);
    void setEnvironment(QDBusObjectPath envpath);
Q_SIGNALS: // SIGNALS
    void environmentChangedActive(const QDBusObjectPath &newenv);
    void environmentAdded(const QDBusObjectPath &path);
    void environmentRemoved/const QDBusObjectPath &path);
    void stateChanged(const bool &state);
};

/*
 * Adaptor class for interface NUT_DBUS_URL.DeviceManager
 */
class DeviceManagerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.DeviceManager")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.DeviceManager\" >\n"
"    <signal name=\"deviceAdded\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"objectpath\" />\n"
"    </signal>\n"
"    <signal name=\"deviceRemoved\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"objectpath\" />\n"
"    </signal>\n"
"    <method name=\"getDeviceList\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DeviceManagerAdaptor(QObject *parent);
    virtual ~DeviceManagerAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QList<QDBusObjectPath> getDeviceList();
Q_SIGNALS: // SIGNALS
    void deviceAdded(const QDBusObjectPath &objectpath);
    void deviceRemoved(const QDBusObjectPath &objectpath);
};

/*
 * Adaptor class for interface NUT_DBUS_URL.Environment
 */
class EnvironmentAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Environment")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Environment\" >\n"
"    <signal name=\"interfacesUpdated\" />\n"
"    <method name=\"getInterfaces\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    EnvironmentAdaptor(QObject *parent);
    virtual ~EnvironmentAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QList<libnut_SelectConfig> getSelectConfig();
    libnut_EnvironmentProperties getProperties();
    QList<QDBusObjectPath> getInterfaces();
    void addInterface(libnut_InterfaceProperties prop;
    void removeInterface(QDBusObjectPath path);
Q_SIGNALS: // SIGNALS
    void interfaceAdded(const QDBusObjetPath &path);
    void interfaceRemoved(const QDBusObjectPath &path);
    void stateChanged(const bool &state);
};

/*
 * Adaptor class for interface NUT_DBUS_URL.Interface
 */
class InterfaceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Interface")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Interface\" >\n"
"    <signal name=\"StateChanged\" />\n"
"    <method name=\"setNetmask\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"Netmask\" />\n"
"    </method>\n"
"    <method name=\"setGateway\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"Gateway\" />\n"
"    </method>\n"
"    <method name=\"activate\" />\n"
"    <method name=\"deactivate\" />\n"
"  </interface>\n"
        "")
public:
    InterfaceAdaptor(QObject *parent);
    virtual ~InterfaceAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void activate();
    void deactivate();
    void setIP(uint HostAddress);
    void setGateway(uint Gateway);
    void setNetmask(uint Netmask);
    void setDynamic();
Q_SIGNALS: // SIGNALS
    void stateChanged(const libnut_InterfaceProperties &properties);
};
}
#endif
