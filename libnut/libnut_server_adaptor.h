/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -a libnut_server_adaptor.h -p libnut_server_proxy.cpp libnut_server.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef LIBNUT_SERVER_ADAPTOR_H_1185121466
#define LIBNUT_SERVER_ADAPTOR_H_1185121466

#include <QtCore/QObject>
#include <QtCore/QMetaObject>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Adaptor class for interface NUT_DBUS_URL.Device
 */
class DeviceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Device")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Device\" >\n"
"    <signal name=\"environmentChangedActive\" >\n"
"      <arg direction=\"out\" type=\"s\" name=\"previous\" />\n"
"    </signal>\n"
"    <signal name=\"environmentsUpdated\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"device\" />\n"
"    </signal>\n"
"    <signal name=\"stateChanged\" />\n"
"    <method name=\"getEnvironments\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"    <method name=\"enable\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"disable\" >\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DeviceAdaptor(QObject *parent);
    virtual ~DeviceAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    bool disable();
    bool enable();
    QList<QDBusObjectPath> getEnvironments();
    libnut_DeviceProperties getProperties();
Q_SIGNALS: // SIGNALS
    void environmentChangedActive(const QString &previous);
    void environmentsUpdated(const QDBusObjectPath &device);
    void stateChanged();
};

/*
 * Adaptor class for interface NUT_DBUS_URL.DeviceManager
 */
class DeviceManagerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.DeviceManager")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.DeviceManager\" >\n"
"    <signal name=\"deviceAdded\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"objectpath\" />\n"
"    </signal>\n"
"    <signal name=\"deviceRemoved\" >\n"
"      <arg direction=\"out\" type=\"o\" name=\"objectpath\" />\n"
"    </signal>\n"
"    <method name=\"getDeviceList\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DeviceManagerAdaptor(QObject *parent);
    virtual ~DeviceManagerAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QList<QDBusObjectPath> getDeviceList();
Q_SIGNALS: // SIGNALS
    void deviceAdded(const QDBusObjectPath &objectpath);
    void deviceRemoved(const QDBusObjectPath &objectpath);
};

/*
 * Adaptor class for interface NUT_DBUS_URL.Environment
 */
class EnvironmentAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Environment")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Environment\" >\n"
"    <signal name=\"interfacesUpdated\" />\n"
"    <method name=\"getInterfaces\" >\n"
"      <arg direction=\"out\" type=\"ao\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    EnvironmentAdaptor(QObject *parent);
    virtual ~EnvironmentAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QList<libnut_SelectType> getSelectConfig();
    libnut_SelectType getCurrentSelection();
    libnut_EnvironmentProperties getProperties();
    QList<QDBusObjectPath> getInterfaces();
Q_SIGNALS: // SIGNALS
    void interfacesUpdated();
};

/*
 * Adaptor class for interface NUT_DBUS_URL.Interface
 */
class InterfaceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "NUT_DBUS_URL.Interface")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"NUT_DBUS_URL.Interface\" >\n"
"    <signal name=\"activeStateChanged\" />\n"
"    <method name=\"setNetmask\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"Netmask\" />\n"
"    </method>\n"
"    <method name=\"setGateway\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"Gateway\" />\n"
"    </method>\n"
"    <method name=\"activate\" />\n"
"    <method name=\"deactivate\" />\n"
"  </interface>\n"
        "")
public:
    InterfaceAdaptor(QObject *parent);
    virtual ~InterfaceAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void activate();
    void deactivate();
    void setGateway(uint Gateway);
    void setNetmask(uint Netmask);
Q_SIGNALS: // SIGNALS
    void activeStateChanged();
};

#endif
/*
 * Implementation of adaptor class DeviceAdaptor
 */

DeviceAdaptor::DeviceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DeviceAdaptor::~DeviceAdaptor()
{
    // destructor
}

bool DeviceAdaptor::disable()
{
    // handle method call NUT_DBUS_URL.Device.disable
    bool out0;
    QMetaObject::invokeMethod(parent(), "disable", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool DeviceAdaptor::enable()
{
    // handle method call NUT_DBUS_URL.Device.enable
    bool out0;
    QMetaObject::invokeMethod(parent(), "enable", Q_RETURN_ARG(bool, out0));
    return out0;
}

QList<QDBusObjectPath> DeviceAdaptor::getEnvironments()
{
    // handle method call NUT_DBUS_URL.Device.getEnvironments
    QList<QDBusObjectPath> out0;
    QMetaObject::invokeMethod(parent(), "getEnvironments", Q_RETURN_ARG(QList<QDBusObjectPath>, out0));
    return out0;
}
libnut_DeviceProperties DeviceAdaptor::getProperties() {
    libnut_DeviceProperties out0;
    QMetaObject::invokeMethod(parent(), "getProperties", Q_RETURN_ARG(libnut_DeviceProperties, out0));
    return out0;
}
/*
 * Implementation of adaptor class DeviceManagerAdaptor
 */

DeviceManagerAdaptor::DeviceManagerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DeviceManagerAdaptor::~DeviceManagerAdaptor()
{
    // destructor
}

QList<QDBusObjectPath> DeviceManagerAdaptor::getDeviceList()
{
    // handle method call NUT_DBUS_URL.DeviceManager.getDeviceList
    QList<QDBusObjectPath> out0;
    QMetaObject::invokeMethod(parent(), "getDeviceList", Q_RETURN_ARG(QList<QDBusObjectPath>, out0));
    return out0;
}

/*
 * Implementation of adaptor class EnvironmentAdaptor
 */

EnvironmentAdaptor::EnvironmentAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

EnvironmentAdaptor::~EnvironmentAdaptor()
{
    // destructor
}
QList<libnut_SelectType> getSelectConfig() {
    QList<libnut_SelectType> out0;
    QMetaObject::invokeMethod(parent(), "getSelectConfig", Q_RETURN_ARG(QList<libnut_SelectType>, out0));
    return out0;
}
libnut_SelectType getCurrentSelection() {
    libnut_SelectType out0;
    QMetaObject::invokeMethod(parent(), "getCurrentSelection", Q_RETURN_ARG(libnut_SelectType, out0));
    return out0;
}
libnut_EnvironmentProperties getProperties() {
    libnut_EnvironmentProperties out0;
    QMetaObject::invokeMethod(parent(), "getProperties", Q_RETURN_ARG(libnut_EnvironmentProperties, out0));
    return out0;
}


QList<QDBusObjectPath> EnvironmentAdaptor::getInterfaces()
{
    // handle method call NUT_DBUS_URL.Environment.getInterfaces
    QList<QDBusObjectPath> out0;
    QMetaObject::invokeMethod(parent(), "getInterfaces", Q_RETURN_ARG(QList<QDBusObjectPath>, out0));
    return out0;
}

/*
 * Implementation of adaptor class InterfaceAdaptor
 */

InterfaceAdaptor::InterfaceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

InterfaceAdaptor::~InterfaceAdaptor()
{
    // destructor
}

void InterfaceAdaptor::activate()
{
    // handle method call NUT_DBUS_URL.Interface.activate
    QMetaObject::invokeMethod(parent(), "activate");
}

void InterfaceAdaptor::deactivate()
{
    // handle method call NUT_DBUS_URL.Interface.deactivate
    QMetaObject::invokeMethod(parent(), "deactivate");
}

void InterfaceAdaptor::setGateway(uint Gateway)
{
    // handle method call NUT_DBUS_URL.Interface.setGateway
    QMetaObject::invokeMethod(parent(), "setGateway", Q_ARG(uint, Gateway));
}

void InterfaceAdaptor::setNetmask(uint Netmask)
{
    // handle method call NUT_DBUS_URL.Interface.setNetmask
    QMetaObject::invokeMethod(parent(), "setNetmask", Q_ARG(uint, Netmask));
}

